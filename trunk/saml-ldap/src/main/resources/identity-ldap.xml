<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.0.xsd">
		
	<!--
		This bean defines the security roles for the Services Management
		application. Simple deployments can use the in-memory version. More
		robust deployments will want to use another option, such as the Jdbc
		version. The name of this should remain "userDetailsService" in order
		for Acegi to find it. To use this, you should add an entry similar to
		the following between the two value tags: battags=notused,ROLE_ADMIN
		where battags is the username you want to grant access to. You can put
		one entry per line.
	-->
	<bean id="userDetailsService"
		class="org.springframework.security.userdetails.ldap.LdapUserDetailsService">
		<constructor-arg index="0" ref="userSearch" />
		<constructor-arg index="1" ref="authoritiesPopulator" />
	</bean>
	
	<!-- 
		User search interface
	-->
	<bean id="userSearch"
		class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
		<constructor-arg index="0" value="ou=People" />
		<constructor-arg index="1" value="(uid={0})" />
		<constructor-arg index="2" ref="contextSource" />
	</bean>
	
	<!-- 
		Authorities populator
	-->
	<bean id="authoritiesPopulator"
		class="org.springframework.security.ldap.populator.DefaultLdapAuthoritiesPopulator">
		<constructor-arg ref="contextSource" />
		<constructor-arg value="ou=Roles" />
		<property name="groupRoleAttribute" value="ou" />
		<!-- the following properties are shown with their default values -->
		<property name="rolePrefix" value="ROLE_" />
		<property name="convertToUpperCase" value="true" />
	</bean>
</beans>
